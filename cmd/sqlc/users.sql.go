// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, name, email, hashedPassword, createdAt, updatedAt)
VALUES (?, ?, ?, ?, DEFAULT, DEFAULT)
`

type CreateUserParams struct {
	ID             string
	Name           string
	Email          string
	Hashedpassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Hashedpassword,
	)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, hashedpassword, createdat, updatedat FROM users  WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Hashedpassword,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, email, hashedpassword, createdat, updatedat FROM users  WHERE id = ?
`

func (q *Queries) GetUserById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Hashedpassword,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}
