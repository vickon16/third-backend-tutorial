// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlc

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type ProjectsStatus string

const (
	ProjectsStatusBacklog    ProjectsStatus = "backlog"
	ProjectsStatusDeveloping ProjectsStatus = "developing"
	ProjectsStatusDone       ProjectsStatus = "done"
)

func (e *ProjectsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProjectsStatus(s)
	case string:
		*e = ProjectsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ProjectsStatus: %T", src)
	}
	return nil
}

type NullProjectsStatus struct {
	ProjectsStatus ProjectsStatus
	Valid          bool // Valid is true if ProjectsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProjectsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ProjectsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProjectsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProjectsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProjectsStatus), nil
}

type Project struct {
	ID           string
	Userid       string
	Name         string
	Description  sql.NullString
	Repourl      sql.NullString
	Siteurl      sql.NullString
	Status       ProjectsStatus
	Dependencies sql.NullString
	Createdat    time.Time
	Updatedat    time.Time
}

type User struct {
	ID             string
	Name           string
	Email          string
	Hashedpassword string
	Createdat      time.Time
	Updatedat      time.Time
}
