// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: projects.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createProject = `-- name: CreateProject :exec
INSERT INTO projects (id, userId, name, description, repoURL, siteURL, status, dependencies, createdAt, updatedAt)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, DEFAULT, DEFAULT)
`

type CreateProjectParams struct {
	ID           string
	Userid       string
	Name         string
	Description  sql.NullString
	Repourl      sql.NullString
	Siteurl      sql.NullString
	Status       ProjectsStatus
	Dependencies sql.NullString
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) error {
	_, err := q.db.ExecContext(ctx, createProject,
		arg.ID,
		arg.Userid,
		arg.Name,
		arg.Description,
		arg.Repourl,
		arg.Siteurl,
		arg.Status,
		arg.Dependencies,
	)
	return err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects WHERE id = ? AND userId = ?
`

type DeleteProjectParams struct {
	ID     string
	Userid string
}

func (q *Queries) DeleteProject(ctx context.Context, arg DeleteProjectParams) error {
	_, err := q.db.ExecContext(ctx, deleteProject, arg.ID, arg.Userid)
	return err
}

const getProjectById = `-- name: GetProjectById :one
SELECT id, userid, name, description, repourl, siteurl, status, dependencies, createdat, updatedat FROM projects  WHERE id = ?
`

func (q *Queries) GetProjectById(ctx context.Context, id string) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProjectById, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Name,
		&i.Description,
		&i.Repourl,
		&i.Siteurl,
		&i.Status,
		&i.Dependencies,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const getProjectsByUserId = `-- name: GetProjectsByUserId :many
SELECT id, userid, name, description, repourl, siteurl, status, dependencies, createdat, updatedat FROM projects  WHERE userId = ?
`

func (q *Queries) GetProjectsByUserId(ctx context.Context, userid string) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getProjectsByUserId, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Userid,
			&i.Name,
			&i.Description,
			&i.Repourl,
			&i.Siteurl,
			&i.Status,
			&i.Dependencies,
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :exec
UPDATE projects SET name = ?, description = ?, repoURL = ?, siteURL = ?, status = ?, dependencies = ? WHERE id = ? AND userId = ?
`

type UpdateProjectParams struct {
	Name         string
	Description  sql.NullString
	Repourl      sql.NullString
	Siteurl      sql.NullString
	Status       ProjectsStatus
	Dependencies sql.NullString
	ID           string
	Userid       string
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) error {
	_, err := q.db.ExecContext(ctx, updateProject,
		arg.Name,
		arg.Description,
		arg.Repourl,
		arg.Siteurl,
		arg.Status,
		arg.Dependencies,
		arg.ID,
		arg.Userid,
	)
	return err
}
